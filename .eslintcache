[{"/Users/mick/Documents/mdd/my-vue/mick-ui/.eslintrc.js":"1","/Users/mick/Documents/mdd/my-vue/mick-ui/src/App.vue":"2","/Users/mick/Documents/mdd/my-vue/mick-ui/src/components/HelloWorld.vue":"3","/Users/mick/Documents/mdd/my-vue/mick-ui/src/components/Test.tsx":"4","/Users/mick/Documents/mdd/my-vue/mick-ui/src/env.d.ts":"5","/Users/mick/Documents/mdd/my-vue/mick-ui/src/main.ts":"6","/Users/mick/Documents/mdd/my-vue/mick-ui/vite.config.ts":"7"},{"size":374,"mtime":1657462551441,"results":"8","hashOfConfig":"9"},{"size":628,"mtime":1657462592826,"results":"10","hashOfConfig":"9"},{"size":966,"mtime":1657450440325,"results":"11","hashOfConfig":"9"},{"size":37,"mtime":1657462612075},{"size":281,"mtime":1657450440325,"results":"12","hashOfConfig":"9"},{"size":90,"mtime":1657450440326,"results":"13","hashOfConfig":"9"},{"size":211,"mtime":1657451296334},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o51h2i",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mick/Documents/mdd/my-vue/mick-ui/.eslintrc.js",[],[],"/Users/mick/Documents/mdd/my-vue/mick-ui/src/App.vue",[],[],"/Users/mick/Documents/mdd/my-vue/mick-ui/src/components/HelloWorld.vue",[],[],"/Users/mick/Documents/mdd/my-vue/mick-ui/src/env.d.ts",[],["29","30","31"],"/Users/mick/Documents/mdd/my-vue/mick-ui/src/main.ts",[],[],{"ruleId":"32","severity":2,"message":"33","line":6,"column":36,"nodeType":"34","messageId":"35","endLine":6,"endColumn":38,"suppressions":"36"},{"ruleId":"32","severity":2,"message":"33","line":6,"column":40,"nodeType":"34","messageId":"35","endLine":6,"endColumn":42,"suppressions":"37"},{"ruleId":"38","severity":1,"message":"39","line":6,"column":44,"nodeType":"40","messageId":"41","endLine":6,"endColumn":47,"suggestions":"42","suppressions":"43"},"@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage",["44"],["45"],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["46","47"],["48"],{"kind":"49","justification":"50"},{"kind":"49","justification":"50"},{"messageId":"51","fix":"52","desc":"53"},{"messageId":"54","fix":"55","desc":"56"},{"kind":"49","justification":"50"},"directive","","suggestUnknown",{"range":"57","text":"58"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"57","text":"59"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[247,250],"unknown","never"]